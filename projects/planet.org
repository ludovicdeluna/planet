Ecrire une introduction de *Planet*


** Format d'écriture

Bien que grâce à [[https://jaspervdj.be/hakyll/][Hakyll]] et [[https://pandoc.org/][Pandoc]], j'ai la possibilité d'écrire dans 
énormément de formats différents, j'ai fais, depuis quelques années, 
le choix de [[https://www.orgmode.org/][Org]]. Etant un utilisateur d'Emacs, le support éditeur est 
assez impressionnant et Org offre une grammaire riche et extensible.

Cependant, pour des besoins spécifiques liés à mes rédactions, *Planet* 
étend les fonctionnalités natives de Org.

*** Affichage du code source
Org et Hakyll via Pandoc supportent très bien l'affichage de code, les 
modifications ont donc été assez légères. Voici la liste des fonctionnalités
ajoutées :

+ ajout de pied de bloc via les commandes src_org{data-pellet}, 
  src_org{data-file} et src_org{data-url} (src_org{data-url} n'est
  effectif que si src_org{data_file} est présent) ;

+ activation du compteur de lignes via src_org{data-line-number} et 
  possibilité de démarrer le compteur à un nombre spécifique via 
  src_org{data-line-start} ;

+ Mise en lumière de plusieurs lignes via src_org{data-hl} qui peut 
  prendre une liste de lignes à mettre en surbrillance en respectant 
  ce motif : chaque séquence est séparée par un src_org{;} et on peut 
  exprimer un seul élément, avec un nombre, ou un interval avec 
  src_org{x..y}. Par exemple, src_org{1;12;15..18;44..38} mettra en 
  lumière les lignes 1, 12, celles de 15 à 18 et celles de 38 à 44.

L'ensemble de ces paramètres sont facultatifs (et à choisir en fonction 
du contexte de rédaction). Voici un exemple d'une petite portion de code:
  
#+BEGIN_EXAMPLE
#+BEGIN_roe
#+ATTR_HTML: :data-kind code
#+ATTR_HTML: :data-pellet OCaml :data-file example/functor.ml 
#+ATTR_HTML: :data-url https://github.com/xvw/planet/blob/master/src/bedrock/list.ml
#+ATTR_HTML: :data-line-number true
#+ATTR_HTML: :data-line-start 22
#+ATTR_HTML: :data-hl 22;24..25
#+BEGIN_src ocaml
module Functor = Functor.Make (struct
  type 'a t = 'a list
  let pure x = [ x ]
  let map f x = Stdlib.List.map f x
end)
#+END_src
#+END_roe
#+END_EXAMPLE

Qui affichera le code de cette manière :

#+ATTR_HTML: :data-kind code
#+ATTR_HTML: :data-pellet OCaml :data-file example/functor.ml 
#+ATTR_HTML: :data-url https://github.com/xvw/planet/blob/master/src/bedrock/list.ml
#+ATTR_HTML: :data-line-number true
#+ATTR_HTML: :data-line-start 22
#+ATTR_HTML: :data-hl 22;24..25
#+BEGIN_roe
#+BEGIN_src ocaml
module Functor = Functor.Make (struct
  type 'a t = 'a list
  let pure x = [ x ]
  let map f x = Stdlib.List.map f x
end)
#+END_src
#+END_roe
